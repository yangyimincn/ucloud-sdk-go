//Code is generated by ucloud code generator, don't modify it by hand, it will cause undefined behaviors.
//go:generate ucloud-gen-go-api UMem CreateUMemcacheGroup

package umem

import (
	"github.com/yangyimincn/ucloud-sdk-go/ucloud/request"
	"github.com/yangyimincn/ucloud-sdk-go/ucloud/response"
)

// CreateUMemcacheGroupRequest is request schema for CreateUMemcacheGroup action
type CreateUMemcacheGroupRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 可用区。参见 [可用区列表](../summary/regionlist.html)
	// Zone *string `required:"false"`

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 请求创建组的名称 范围[6-60]
	Name *string `required:"true"`

	// 每个节点的内存大小,单位GB,默认1GB 目前仅支持1/2/4/8/16/32这几档
	Size *int `required:"false"`

	// 配置ID,目前仅支持默认配置id 默认配置id:"9a891891-c245-4b66-bce8-67e59430d67c"
	ConfigId *string `required:"false"`

	// Memcache版本信息,默认为1.4.31
	Version *string `required:"false"`

	// 计费模式，Year , Month, Dynamic 默认: Month
	ChargeType *string `required:"false"`

	// 购买时长，默认为1
	Quantity *int `required:"false"`

	// 业务组 默认：Default
	Tag *string `required:"false"`

	//
	Protocol *string `required:"false"`

	// 代金券ID
	CouponId *string `required:"false"`

	// VPC 的 ID
	VPCId *string `required:"false"`

	// Subnet 的 ID
	SubnetId *string `required:"false"`
}

// CreateUMemcacheGroupResponse is response schema for CreateUMemcacheGroup action
type CreateUMemcacheGroupResponse struct {
	response.CommonBase

	// 创建的组ID
	GroupId string
}

// NewCreateUMemcacheGroupRequest will create request of CreateUMemcacheGroup action.
func (c *UMemClient) NewCreateUMemcacheGroupRequest() *CreateUMemcacheGroupRequest {
	req := &CreateUMemcacheGroupRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

// CreateUMemcacheGroup - 创建单机Memcache
func (c *UMemClient) CreateUMemcacheGroup(req *CreateUMemcacheGroupRequest) (*CreateUMemcacheGroupResponse, error) {
	var err error
	var res CreateUMemcacheGroupResponse

	err = c.Client.InvokeAction("CreateUMemcacheGroup", req, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
