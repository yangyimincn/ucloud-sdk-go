//Code is generated by ucloud code generator, don't modify it by hand, it will cause undefined behaviors.
//go:generate ucloud-gen-go-api ULB AllocateBackend

package ulb

import (
	"github.com/yangyimincn/ucloud-sdk-go/ucloud/request"
	"github.com/yangyimincn/ucloud-sdk-go/ucloud/response"
)

// AllocateBackendRequest is request schema for AllocateBackend action
type AllocateBackendRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"true"`

	// 负载均衡实例的ID
	ULBId *string `required:"true"`

	// VServer实例的ID
	VServerId *string `required:"true"`

	// 所添加的后端资源的类型，枚举值：UHost -> 云主机；UPM -> 物理云主机； UDHost -> 私有专区主机；UDocker -> 容器，默认值为“UHost”
	ResourceType *string `required:"true"`

	// 所添加的后端资源的资源ID
	ResourceId *string `required:"true"`

	// 所添加的后端资源服务端口，取值范围[1-65535]，默认80
	Port *int `required:"false"`

	// 所添加的后端RS权重（在加权轮询算法下有效），取值范围[0-100]，默认为1
	Weight *int `required:"false"`

	// 后端实例状态开关，枚举值： 1：启用； 0：禁用 默认为启用
	Enabled *int `required:"false"`
}

// AllocateBackendResponse is response schema for AllocateBackend action
type AllocateBackendResponse struct {
	response.CommonBase

	// 所添加的后端资源在ULB中的对象ID，（为ULB系统中使用，与资源自身ID无关），可用于 UpdateBackendAttribute/UpdateBackendAttributeBatch/ReleaseBackend
	BackendId string
}

// NewAllocateBackendRequest will create request of AllocateBackend action.
func (c *ULBClient) NewAllocateBackendRequest() *AllocateBackendRequest {
	req := &AllocateBackendRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

// AllocateBackend - 添加ULB后端资源实例
func (c *ULBClient) AllocateBackend(req *AllocateBackendRequest) (*AllocateBackendResponse, error) {
	var err error
	var res AllocateBackendResponse

	err = c.Client.InvokeAction("AllocateBackend", req, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
