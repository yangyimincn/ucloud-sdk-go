//Code is generated by ucloud code generator, don't modify it by hand, it will cause undefined behaviors.
//go:generate ucloud-gen-go-api ULB CreateVServer

package ulb

import (
	"github.com/yangyimincn/ucloud-sdk-go/ucloud/request"
	"github.com/yangyimincn/ucloud-sdk-go/ucloud/response"
)

// CreateVServerRequest is request schema for CreateVServer action
type CreateVServerRequest struct {
	request.CommonBase

	// [公共参数] 地域。 参见 [地域和可用区列表](../summary/regionlist.html)
	// Region *string `required:"true"`

	// [公共参数] 项目ID。不填写为默认项目，子帐号必须填写。 请参考[GetProjectList接口](../summary/get_project_list.html)
	// ProjectId *string `required:"false"`

	// 负载均衡实例ID
	ULBId *string `required:"true"`

	// VServer实例名称，默认为"VServer"
	VServerName *string `required:"false"`

	// 监听器类型，枚举值为：RequestProxy -> 请求代理；PacketsTransmit -> 报文转发；默认为"RequestProxy"
	ListenType *string `required:"false"`

	// VServer实例的协议，请求代理模式下有 HTTP、HTTPS、TCP，报文转发下有 TCP，UDP。默认为“HTTP"
	Protocol *string `required:"false"`

	// VServer后端端口，取值范围[1-65535]；默认值为80
	FrontendPort *int `required:"false"`

	// VServer负载均衡模式，枚举值：Roundrobin -> 轮询;Source -> 源地址；ConsistentHash -> 一致性哈希；SourcePort -> 源地址（计算端口）；ConsistentHashPort -> 一致性哈希（计算端口）; WeightRoundrobin -> 加权轮询; Leastconn -> 最小连接数。ConsistentHash，SourcePort，ConsistentHashPort 只在报文转发中使用；Leastconn只在请求代理中使用；Roundrobin、Source和WeightRoundrobin在请求代理和报文转发中使用。默认为："Roundrobin"
	Method *string `required:"false"`

	// VServer会话保持方式，默认关闭会话保持。枚举值：None -> 关闭；ServerInsert -> 自动生成KEY；UserDefined -> 用户自定义KEY。
	PersistenceType *string `required:"false"`

	// 根据PersistenceType确认； None和ServerInsert： 此字段无意义； UserDefined：此字段传入自定义会话保持String
	PersistenceInfo *string `required:"false"`

	// ListenType为RequestProxy时表示空闲连接的回收时间，单位：秒，取值范围：时(0，86400]，默认值为60；ListenType为PacketsTransmit时表示连接保持的时间，单位：秒，取值范围：[60，900]，0 表示禁用连接保持
	ClientTimeout *int `required:"false"`

	// 健康检查类型，枚举值：Port -> 端口检查；Path -> 路径检查；
	MonitorType *string `required:"false"`

	// 根据MonitorType确认； 当MonitorType为Port时，此字段无意义。当MonitorType为Path时，代表HTTP检查路径
	Domain *string `required:"false"`

	// 根据MonitorType确认； 当MonitorType为Port时，此字段无意义。当MonitorType为Path时，代表HTTP检查域名
	Path *string `required:"false"`
}

// CreateVServerResponse is response schema for CreateVServer action
type CreateVServerResponse struct {
	response.CommonBase

	// VServer实例的Id
	VServerId string
}

// NewCreateVServerRequest will create request of CreateVServer action.
func (c *ULBClient) NewCreateVServerRequest() *CreateVServerRequest {
	req := &CreateVServerRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

// CreateVServer - 创建VServer实例，定义监听的协议和端口以及负载均衡算法
func (c *ULBClient) CreateVServer(req *CreateVServerRequest) (*CreateVServerResponse, error) {
	var err error
	var res CreateVServerResponse

	err = c.Client.InvokeAction("CreateVServer", req, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
